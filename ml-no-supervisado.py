# app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from core_analysis import MethaneEmissionsAnalyzer

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de Clusters de Emisiones de Metano",
    page_icon="üåç",
    layout="wide"
)

# T√≠tulo y descripci√≥n
st.title("üåç An√°lisis de Clusters de Emisiones de Metano")
st.markdown("""
Esta herramienta utiliza algoritmos de machine learning para identificar patrones en las emisiones globales de metano,
un gas que contribuye significativamente al calentamiento global. Los resultados pueden ayudar a dise√±ar pol√≠ticas
ambientales m√°s efectivas.
""")

# Carga de datos
@st.cache_resource
def load_data_and_analyzer():
    """Carga los datos y inicializa el analizador."""
    # En una implementaci√≥n real, esto cargar√≠a el dataset real
    # Aqu√≠ creamos datos de ejemplo para demostraci√≥n
    data_path = "data/Methane_final.csv"
    return MethaneEmissionsAnalyzer(data_path)

analyzer = load_data_and_analyzer()

# Sidebar para configuraci√≥n
st.sidebar.header("Configuraci√≥n del Modelo")
st.sidebar.markdown("Seleccione las caracter√≠sticas y par√°metros para el an√°lisis de clustering.")

# Selecci√≥n de caracter√≠sticas
available_features = analyzer.df.select_dtypes(include=[np.number, 'object']).columns.tolist()
default_features = ['emissions', 'log_emissions', 'type', 'segment']
selected_features = st.sidebar.multiselect(
    "Caracter√≠sticas para clustering:",
    options=available_features,
    default=default_features
)

# N√∫mero de clusters (autom√°tico o manual)
cluster_mode = st.sidebar.radio(
    "Determinaci√≥n de clusters:",
    options=['Autom√°tico (m√©todo del codo y silueta)', 'Manual'],
    index=0
)

if cluster_mode == 'Manual':
    n_clusters = st.sidebar.slider("N√∫mero de clusters:", 2, 10, 4)
else:
    n_clusters = None

# Bot√≥n para ejecutar an√°lisis
run_analysis = st.sidebar.button("Ejecutar An√°lisis")

# Secci√≥n principal
if run_analysis and len(selected_features) > 0:
    st.header("Resultados del An√°lisis de Clustering")
    
    # Preprocesamiento
    with st.spinner("Preprocesando datos..."):
        scaled_data = analyzer.preprocess_for_clustering(selected_features)
    
    # Determinaci√≥n de clusters √≥ptimos
    if cluster_mode == 'Autom√°tico (m√©todo del codo y silueta)':
        with st.spinner("Determinando n√∫mero √≥ptimo de clusters..."):
            optimal_k, k_values, wcss, silhouette_scores = analyzer.find_optimal_clusters(scaled_data)
            n_clusters = optimal_k
        
        # Mostrar resultados de determinaci√≥n de clusters
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("M√©todo del Codo")
            fig_elbow = px.line(
                x=k_values,
                y=wcss,
                labels={'x': 'N√∫mero de Clusters (k)', 'y': 'Suma de Cuadrados Intra-Cluster (WCSS)'},
                title='M√©todo del Codo para Determinar k √ìptimo'
            )
            fig_elbow.add_vline(x=n_clusters, line_dash="dash", line_color="red")
            st.plotly_chart(fig_elbow, use_container_width=True)
        
        with col2:
            st.subheader("M√©todo de Silueta")
            fig_silhouette = px.line(
                x=range(2, len(silhouette_scores)+2),
                y=silhouette_scores,
                labels={'x': 'N√∫mero de Clusters (k)', 'y': 'Puntaje de Silueta'},
                title='An√°lisis de Silueta para Determinar k √ìptimo'
            )
            fig_silhouette.add_vline(x=n_clusters, line_dash="dash", line_color="red")
            st.plotly_chart(fig_silhouette, use_container_width=True)
        
        st.success(f"N√∫mero √≥ptimo de clusters determinado: {n_clusters}")
    
    # Ejecutar clustering
    with st.spinner(f"Ejecutando K-means con {n_clusters} clusters..."):
        analyzer.perform_clustering(scaled_data, n_clusters)
    
    # Mostrar resultados
    st.subheader("Distribuci√≥n de Clusters")
    
    # Visualizaci√≥n seleccionada
    viz_option = st.selectbox(
        "Tipo de visualizaci√≥n:",
        options=['Mapa Global', 'Scatter Plot', 'Gr√°fico de Barras'],
        index=0
    )
    
    if viz_option == 'Mapa Global':
        fig = analyzer.visualize_clusters('map')
    elif viz_option == 'Scatter Plot':
        fig = analyzer.visualize_clusters('scatter')
    else:
        fig = analyzer.visualize_clusters('bar')
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Estad√≠sticas e interpretaci√≥n de clusters
    st.subheader("An√°lisis Detallado por Cluster")
    
    cluster_stats, interpretations = analyzer.analyze_clusters()
    
    # Mostrar estad√≠sticas
    st.dataframe(
        cluster_stats.style
        .background_gradient(cmap='YlOrRd', subset=['total_emissions', 'mean_emissions'])
        .format({
            'mean_emissions': '{:,.0f}',
            'median_emissions': '{:,.0f}',
            'total_emissions': '{:,.0f}'
        }),
        use_container_width=True
    )
    
    # Mostrar interpretaciones
    st.subheader("Interpretaci√≥n de Clusters y Recomendaciones")
    
    selected_cluster = st.selectbox(
        "Seleccione un cluster para ver su interpretaci√≥n:",
        options=sorted(interpretations.keys())
    )
    
    st.markdown("### Caracter√≠sticas del Cluster")
    st.info(interpretations[selected_cluster])
    
    # Descargar resultados
    st.subheader("Exportar Resultados")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.download_button(
            label="Descargar Datos con Clusters",
            data=analyzer.df.to_csv(index=False).encode('utf-8'),
            file_name="methane_emissions_with_clusters.csv",
            mime="text/csv"
        )
    
    with col2:
        st.download_button(
            label="Descargar Estad√≠sticas por Cluster",
            data=cluster_stats.to_csv(index=False).encode('utf-8'),
            file_name="cluster_statistics.csv",
            mime="text/csv"
        )
    
elif run_analysis and len(selected_features) == 0:
    st.error("Por favor seleccione al menos una caracter√≠stica para el clustering.")
else:
    # Estado inicial - mostrar datos de ejemplo
    st.header("Exploraci√≥n de Datos")
    st.markdown("Revise los datos antes de ejecutar el an√°lisis.")
    
    st.dataframe(analyzer.df.head(), use_container_width=True)
    
    # Mostrar estad√≠sticas descriptivas
    st.subheader("Estad√≠sticas Descriptivas")
    st.dataframe(analyzer.df.describe(), use_container_width=True)
    
    # Mostrar distribuci√≥n de emisiones
    fig_dist = px.histogram(
        analyzer.df,
        x='emissions',
        nbins=50,
        title='Distribuci√≥n de Emisiones de Metano',
        labels={'emissions': 'Emisiones (kt)'}
    )
    st.plotly_chart(fig_dist, use_container_width=True)

# Informaci√≥n adicional
st.sidebar.markdown("---")
st.sidebar.info("""
**Nota sobre el metano:**
- 30% del calentamiento global desde la Revoluci√≥n Industrial
- Potencia de calentamiento 28-36 veces mayor que el CO‚ÇÇ (100 a√±os)
- Vida atmosf√©rica: ~12 a√±os
""")

# Pie de p√°gina
st.markdown("---")
st.markdown("""
**Uso recomendado:**
1. Seleccione caracter√≠sticas relevantes en el panel izquierdo
2. Elija m√©todo para determinar n√∫mero de clusters
3. Haga clic en "Ejecutar An√°lisis"
4. Explore resultados e interpretaciones
""")